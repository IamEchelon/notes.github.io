{"version":3,"sources":["app/elm/Main.elm","app/elm/Note.elm","app/elm/Shapes.elm","app/js/browser.js","app/js/index.js","app/js/synths.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA","file":"public/js/app.js","sourcesContent":["","","","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar browser = exports.browser = {\n  navSelect: function navSelect(browser) {\n    return navigator.userAgent.match(browser);\n  },\n  android: function android() {\n    return this.navSelect(/Android/i);\n  },\n  iphone: function iphone() {\n    return this.navSelect(/iPhone/i);\n  },\n  ipad: function ipad() {\n    return this.navSelect(/iPad/i);\n  }\n};\n","'use strict';\n\nvar _synths = require('./synths');\n\nvar _browser = require('./browser');\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Set and initialize elm constants\n  var node = document.getElementById('note-box');\n  var elmApp = Elm.Main.embed(node);\n  var context = new AudioContext();\n  var synth = void 0;\n  var android = _browser.browser.android();\n  var iphone = _browser.browser.iphone();\n  var ipad = _browser.browser.ipad();\n\n  // Selects & creates a new instance of tone synthesizer\n  var chooseSynth = function chooseSynth(elmSynth) {\n    switch (elmSynth) {\n      case 'duosynth':\n        return _synths.select.duosynth();\n      case 'fmsynth':\n        return _synths.select.fmsynth();\n      case 'amsynth':\n        return _synths.select.amsynth();\n      case 'membsynth':\n        return _synths.select.membsynth();\n      case 'monosynth':\n        return _synths.select.monosynth();\n      case 'square':\n        return _synths.select.square('square');\n      case 'Please Select a Sound-':\n        return 'None';\n      default:\n        console.log('Something has gone horribly awry!');\n    }\n  };\n\n  // Receive info from Elm\n  if (android || iphone || ipad) {\n    elmApp.ports.initMobile.subscribe(setMobileContext);\n  } else {\n    elmApp.ports.synthToJS.subscribe(synthSelection);\n  }\n\n  // elm callbacks\n  var triggerNote = function triggerNote(elmNote) {\n    return synth.triggerAttack(elmNote);\n  };\n\n  var stopNote = function stopNote(noop) {\n    return synth.triggerRelease();\n  };\n\n  function synthSelection(elmSynth) {\n    synth = chooseSynth(elmSynth);\n    elmApp.ports.noteToJS.subscribe(triggerNote);\n    elmApp.ports.stopNote.subscribe(stopNote);\n  }\n\n  var setMobileContext = function setMobileContext(noop) {\n    StartAudioContext(Tone.context, '#playButton');\n    elmApp.ports.synthToJS.subscribe(synthSelection);\n  };\n\n  console.log('Initialized app');\n});\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.select = undefined;\n\nvar _tone = require('tone');\n\nvar _tone2 = _interopRequireDefault(_tone);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar select = exports.select = {\n  limiter: new _tone2.default.Limiter(-14),\n\n  // create instruments\n  duosynth: function duosynth() {\n    return new _tone2.default.DuoSynth().toMaster();\n  },\n  fmsynth: function fmsynth() {\n    return new _tone2.default.FMSynth().toMaster();\n  },\n  amsynth: function amsynth() {\n    return new _tone2.default.AMSynth().toMaster();\n  },\n  membsynth: function membsynth() {\n    return new _tone2.default.MembraneSynth().toMaster();\n  },\n  monosynth: function monosynth() {\n    return new _tone2.default.MonoSynth().toMaster();\n  },\n  square: function square() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'sawtooth';\n    var attack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.01;\n    var decay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;\n    var sustain = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.2;\n    var release = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.2;\n\n    var sq = new _tone2.default.Synth({\n      oscillator: {\n        type: type\n      },\n      envelope: {\n        attack: attack,\n        decay: decay,\n        sustain: sustain,\n        release: release\n      }\n    }).connect(this.limiter).toMaster();\n    return sq;\n  }\n}; // This is where we construct our variouse ToneJS instruments\n"]}